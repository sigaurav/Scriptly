# Generated by Django 4.2.20 on 2025-03-31 09:28

import autoslug.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Script',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('script_name', models.CharField(max_length=255)),
                ('script_path', models.CharField(max_length=255)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from='script_name', unique=True)),
                ('script_description', models.TextField(blank=True, null=True)),
                ('documentation', models.TextField(blank=True, null=True)),
                ('script_order', models.PositiveSmallIntegerField(default=1)),
                ('is_active', models.BooleanField(default=True)),
                ('ignore_bad_imports', models.BooleanField(default=False, help_text='Ignore bad imports when adding scripts. This is useful if a script is under a virtual environment.')),
                ('execute_full_path', models.BooleanField(default=True)),
                ('save_path', models.CharField(blank=True, help_text='By default save to the script name, this will change the output folder.', max_length=255, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'script',
                'verbose_name_plural': 'scripts',
            },
        ),
        migrations.CreateModel(
            name='ScriptlyFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filepath', models.FileField(max_length=500, upload_to='')),
                ('filepreview', models.TextField(blank=True, null=True)),
                ('filetype', models.CharField(blank=True, max_length=255, null=True)),
                ('size_bytes', models.IntegerField(null=True)),
                ('checksum', models.CharField(blank=True, max_length=40)),
            ],
            options={
                'verbose_name': 'scriptly file',
                'verbose_name_plural': 'scriptly files',
            },
        ),
        migrations.CreateModel(
            name='ScriptlyJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('celery_id', models.CharField(max_length=255, null=True)),
                ('uuid', models.CharField(default=uuid.uuid4, max_length=255, unique=True)),
                ('job_name', models.CharField(max_length=255)),
                ('job_description', models.TextField(blank=True, null=True)),
                ('stdout', models.TextField(blank=True, null=True)),
                ('stderr', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('completed', 'Completed'), ('deleted', 'Deleted'), ('FAILURE', 'Failed'), ('error', 'Error'), ('running', 'Running'), ('submitted', 'Submitted')], default='submitted', max_length=255)),
                ('save_path', models.CharField(blank=True, max_length=255, null=True)),
                ('command', models.TextField()),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'scriptly job',
                'verbose_name_plural': 'scriptly jobs',
            },
        ),
        migrations.CreateModel(
            name='ScriptlyWidget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Widget Name')),
                ('widget_class', models.CharField(blank=True, help_text='Widget class to use (e.g. django.forms.TextInput, defaults to Form Field on Script Parameter model if blank).', max_length=50, null=True)),
                ('input_attributes', models.TextField(blank=True, help_text='Extra attributes to the input field. The extra attributes MUST be specified like key="value" (e.g. type="date").', null=True, verbose_name='Input Widget Extra Attributes')),
                ('input_class', models.CharField(blank=True, help_text='The class name(s) for the input field.', max_length=255, null=True, verbose_name='Input Widget Class name(s)')),
                ('input_properties', models.CharField(blank=True, help_text='Additional properties to append to the input field.', max_length=255, null=True, verbose_name='Input Widget Extra Properties')),
            ],
        ),
        migrations.CreateModel(
            name='ScriptParameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_param', models.CharField(blank=True, max_length=255)),
                ('script_param', models.TextField()),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from='script_param', unique=True)),
                ('is_output', models.BooleanField(default=None)),
                ('required', models.BooleanField(default=False)),
                ('choices', models.TextField(blank=True, null=True)),
                ('choice_limit', models.CharField(blank=True, max_length=10, null=True)),
                ('collapse_arguments', models.BooleanField(default=True, help_text='Collapse separate inputs to a given argument to a single input (ie: --arg 1 --arg 2 becomes --arg 1 2)')),
                ('form_field', models.CharField(max_length=255)),
                ('default', models.JSONField(blank=True, null=True)),
                ('input_type', models.CharField(help_text='The python type expected by the script (e.g. boolean, integer, file).', max_length=255)),
                ('param_help', models.TextField(blank=True, null=True, verbose_name='help')),
                ('is_checked', models.BooleanField(default=False)),
                ('hidden', models.BooleanField(default=False)),
                ('param_order', models.SmallIntegerField(default=0, help_text='The order the parameter appears to the user.')),
                ('custom_widget', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='scriptly.scriptlywidget')),
            ],
            options={
                'verbose_name': 'script parameter',
                'verbose_name_plural': 'script parameters',
            },
        ),
        migrations.CreateModel(
            name='ScriptParameters',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_value', models.TextField(db_column='value')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scriptly.scriptlyjob')),
                ('parameter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scriptly.scriptparameter')),
            ],
            options={
                'verbose_name': 'script parameters',
            },
        ),
        migrations.CreateModel(
            name='VirtualEnvironment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the virtual environment.', max_length=25)),
                ('python_binary', models.CharField(help_text='The binary to use for creating the virtual environment. Should be in your path (e.g. "python3" or "/usr/bin/python3")', max_length=1024)),
                ('requirements', models.TextField(blank=True, help_text='A list of requirements for the virtualenv. This gets passed directly to "pip install -r".', null=True)),
                ('venv_directory', models.CharField(help_text='The directory to place the virtual environment under.', max_length=1024)),
            ],
            options={
                'verbose_name': 'virtual environment',
                'verbose_name_plural': 'virtual environments',
            },
        ),
        migrations.CreateModel(
            name='UserFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.TextField()),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scriptly.scriptlyjob')),
                ('parameter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='scriptly.scriptparameters')),
                ('system_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scriptly.scriptlyfile')),
            ],
        ),
        migrations.CreateModel(
            name='ScriptVersion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('script_version', models.CharField(blank=True, default='1', help_text='The script version.', max_length=50)),
                ('script_iteration', models.PositiveSmallIntegerField(default=1)),
                ('script_path', models.FileField(upload_to='')),
                ('default_version', models.BooleanField(default=False)),
                ('checksum', models.CharField(blank=True, max_length=40)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_script_version_set', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modified_script_version_set', to=settings.AUTH_USER_MODEL)),
                ('script', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='script_version', to='scriptly.script')),
            ],
            options={
                'verbose_name': 'script version',
                'verbose_name_plural': 'script versions',
                'get_latest_by': '-created_date',
            },
        ),
        migrations.CreateModel(
            name='ScriptParser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=255)),
                ('script_version', models.ManyToManyField(to='scriptly.scriptversion')),
            ],
        ),
        migrations.CreateModel(
            name='ScriptParameterGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_name', models.TextField()),
                ('hidden', models.BooleanField(default=False)),
                ('script_version', models.ManyToManyField(to='scriptly.scriptversion')),
            ],
            options={
                'verbose_name': 'script parameter group',
                'verbose_name_plural': 'script parameter groups',
            },
        ),
        migrations.AddField(
            model_name='scriptparameter',
            name='parameter_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scriptly.scriptparametergroup'),
        ),
        migrations.AddField(
            model_name='scriptparameter',
            name='parser',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scriptly.scriptparser'),
        ),
        migrations.AddField(
            model_name='scriptparameter',
            name='script_version',
            field=models.ManyToManyField(to='scriptly.scriptversion'),
        ),
        migrations.CreateModel(
            name='ScriptlyProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='scriptlyjob',
            name='script_version',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scriptly.scriptversion'),
        ),
        migrations.AddField(
            model_name='scriptlyjob',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ScriptGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_name', models.TextField()),
                ('description', models.TextField(blank=True, null=True)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from='group_name', unique=True)),
                ('group_description', models.TextField(blank=True, null=True)),
                ('group_order', models.SmallIntegerField(default=1)),
                ('is_active', models.BooleanField(default=True)),
                ('user_groups', models.ManyToManyField(blank=True, to='auth.group')),
            ],
            options={
                'verbose_name': 'script group',
                'verbose_name_plural': 'script groups',
            },
        ),
        migrations.AddField(
            model_name='script',
            name='script_group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='scriptly.scriptgroup'),
        ),
        migrations.AddField(
            model_name='script',
            name='user_groups',
            field=models.ManyToManyField(blank=True, to='auth.group'),
        ),
        migrations.AddField(
            model_name='script',
            name='virtual_environment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='scriptly.virtualenvironment'),
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('scripts', models.ManyToManyField(blank=True, to='scriptly.script')),
            ],
        ),
        migrations.CreateModel(
            name='APIKey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('active', models.BooleanField(default=True)),
                ('key', models.TextField()),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scriptly.scriptlyprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'favorite',
                'verbose_name_plural': 'favorites',
                'unique_together': {('user', 'content_type', 'object_id')},
            },
        ),
    ]
